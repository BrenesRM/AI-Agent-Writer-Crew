#!/usr/bin/env python3
"""
Script de prueba para el frontend de Story Enhancer
Verifica que todos los componentes est√©n funcionando correctamente
"""

import sys
import importlib
import traceback
from pathlib import Path

# Agregar directorio del proyecto al path
project_dir = Path(__file__).parent
sys.path.append(str(project_dir))

def test_imports():
    """Prueba que todos los m√≥dulos se puedan importar"""
    
    print("üîç Probando importaci√≥n de m√≥dulos...")
    
    modules_to_test = [
        'streamlit',
        'frontend.utils.session_state',
        'frontend.components.sidebar', 
        'frontend.pages.document_upload',
        'frontend.pages.manuscript_editor',
        'frontend.pages.agent_control',
        'frontend.pages.outputs_viewer',
        'frontend.pages.settings_page'
    ]
    
    failed_imports = []
    
    for module in modules_to_test:
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}")
        except ImportError as e:
            print(f"  ‚ùå {module}: {e}")
            failed_imports.append(module)
        except Exception as e:
            print(f"  ‚ö†Ô∏è  {module}: Error inesperado - {e}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ùå {len(failed_imports)} m√≥dulos fallaron en la importaci√≥n")
        return False
    else:
        print(f"\n‚úÖ Todos los m√≥dulos se importaron correctamente")
        return True

def test_dependencies():
    """Prueba las dependencias cr√≠ticas"""
    
    print("\nüì¶ Probando dependencias cr√≠ticas...")
    
    critical_deps = [
        ('streamlit', 'Streamlit'),
        ('streamlit_option_menu', 'Streamlit Option Menu'),
        ('plotly', 'Plotly'),
        ('pandas', 'Pandas'),
        ('pathlib', 'Pathlib (built-in)'),
        ('json', 'JSON (built-in)'),
        ('datetime', 'DateTime (built-in)')
    ]
    
    failed_deps = []
    
    for dep_name, dep_display in critical_deps:
        try:
            importlib.import_module(dep_name)
            print(f"  ‚úÖ {dep_display}")
        except ImportError:
            print(f"  ‚ùå {dep_display}")
            failed_deps.append(dep_display)
    
    if failed_deps:
        print(f"\n‚ùå Dependencias faltantes: {', '.join(failed_deps)}")
        print("üí° Ejecuta: pip install -r requirements.txt")
        return False
    else:
        print(f"\n‚úÖ Todas las dependencias est√°n disponibles")
        return True

def test_directory_structure():
    """Verifica la estructura de directorios"""
    
    print("\nüìÅ Verificando estructura de directorios...")
    
    required_dirs = [
        'frontend/pages',
        'frontend/components', 
        'frontend/utils',
        'static/uploads',
        'static/outputs',
        'static/temp',
        'logs'
    ]
    
    missing_dirs = []
    
    for dir_path in required_dirs:
        full_path = project_dir / dir_path
        if full_path.exists():
            print(f"  ‚úÖ {dir_path}")
        else:
            print(f"  ‚ùå {dir_path}")
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print(f"\n‚ö†Ô∏è  Directorios faltantes encontrados. Cre√°ndolos...")
        for dir_path in missing_dirs:
            full_path = project_dir / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
            print(f"  ‚úÖ Creado: {dir_path}")
    
    print(f"\n‚úÖ Estructura de directorios verificada")
    return True

def test_streamlit_config():
    """Verifica la configuraci√≥n de Streamlit"""
    
    print("\n‚öôÔ∏è Verificando configuraci√≥n de Streamlit...")
    
    config_file = project_dir / '.streamlit' / 'config.toml'
    
    if config_file.exists():
        print(f"  ‚úÖ Archivo de configuraci√≥n encontrado")
        try:
            with open(config_file, 'r') as f:
                content = f.read()
                if '[global]' in content and '[server]' in content:
                    print(f"  ‚úÖ Configuraci√≥n v√°lida")
                    return True
                else:
                    print(f"  ‚ö†Ô∏è  Configuraci√≥n incompleta")
        except Exception as e:
            print(f"  ‚ùå Error leyendo configuraci√≥n: {e}")
    else:
        print(f"  ‚ö†Ô∏è  Archivo de configuraci√≥n no encontrado")
        print(f"  üí° El frontend funcionar√° con configuraci√≥n por defecto")
    
    return True

def test_main_app():
    """Verifica que el archivo principal app.py est√© correcto"""
    
    print("\nüì± Verificando aplicaci√≥n principal...")
    
    app_file = project_dir / 'app.py'
    
    if not app_file.exists():
        print(f"  ‚ùå app.py no encontrado")
        return False
    
    try:
        with open(app_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificar elementos cr√≠ticos
        critical_elements = [
            'import streamlit as st',
            'st.set_page_config',
            'def main():',
            '__name__ == "__main__"'
        ]
        
        missing_elements = []
        for element in critical_elements:
            if element not in content:
                missing_elements.append(element)
        
        if missing_elements:
            print(f"  ‚ùå Elementos faltantes en app.py: {missing_elements}")
            return False
        else:
            print(f"  ‚úÖ app.py tiene estructura correcta")
            return True
            
    except Exception as e:
        print(f"  ‚ùå Error verificando app.py: {e}")
        return False

def run_all_tests():
    """Ejecuta todas las pruebas"""
    
    print("=" * 50)
    print("üß™ TESTING FRONTEND - STORY ENHANCER")
    print("=" * 50)
    
    tests = [
        ("Importaci√≥n de m√≥dulos", test_imports),
        ("Dependencias", test_dependencies), 
        ("Estructura de directorios", test_directory_structure),
        ("Configuraci√≥n Streamlit", test_streamlit_config),
        ("Aplicaci√≥n principal", test_main_app)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed_tests += 1
            else:
                print(f"‚ö†Ô∏è  {test_name} tuvo problemas menores")
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            traceback.print_exc()
    
    print("\n" + "=" * 50)
    print(f"üìä RESULTADOS: {passed_tests}/{total_tests} pruebas exitosas")
    
    if passed_tests == total_tests:
        print("‚úÖ ¬°Todos los tests pasaron! El frontend est√° listo.")
        print("\nüöÄ Para ejecutar la aplicaci√≥n:")
        print("   ./run_frontend.sh")
        print("   o")
        print("   streamlit run app.py")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron, pero el frontend deber√≠a funcionar.")
        print("üí° Revisa los errores arriba para una experiencia √≥ptima.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)