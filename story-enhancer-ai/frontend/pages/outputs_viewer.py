"""
P√°gina de visualizaci√≥n y descarga de outputs finales
"""

import streamlit as st
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any
from frontend.utils.session_state import add_log_entry

def render_outputs_viewer():
    """Renderiza la p√°gina de visualizaci√≥n de outputs"""
    
    st.title("üìä Resultados y Outputs")
    st.markdown("Visualiza y descarga los outputs finales generados por el proceso de agentes.")
    
    # Verificar si hay outputs disponibles
    if not any(st.session_state.final_outputs.values()):
        render_no_outputs_state()
        return
    
    # Tabs para cada tipo de output
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìñ Historia Final", 
        "üìö Biblia de la Historia", 
        "üë• Gu√≠a de Personajes", 
        "üé¨ Prompts Visuales",
        "üì¶ Descargar Todo"
    ])
    
    with tab1:
        render_enhanced_story()
        
    with tab2:
        render_story_bible()
        
    with tab3:
        render_character_guide()
        
    with tab4:
        render_visual_prompts()
        
    with tab5:
        render_download_all()

def render_no_outputs_state():
    """Estado cuando no hay outputs disponibles"""
    
    st.info("üìù No hay outputs generados a√∫n.")
    st.markdown("Los outputs aparecer√°n aqu√≠ una vez que el proceso de agentes se complete.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ‚úÖ Para generar outputs necesitas:")
        st.write("‚Ä¢ Documentos de referencia procesados")
        st.write("‚Ä¢ Manuscrito base cargado")
        st.write("‚Ä¢ Proceso de agentes completado")
    
    with col2:
        st.markdown("### üéØ Los outputs incluir√°n:")
        st.write("‚Ä¢ Historia mejorada")
        st.write("‚Ä¢ Biblia del mundo narrativo")
        st.write("‚Ä¢ Gu√≠a detallada de personajes")
        st.write("‚Ä¢ Prompts para video AI")
    
    # Bot√≥n para generar outputs de ejemplo (para testing)
    if st.button("üß™ Generar Outputs de Ejemplo (Solo para pruebas)"):
        generate_mock_outputs()
        st.success("‚úÖ Outputs de ejemplo generados!")
        st.experimental_rerun()

def generate_mock_outputs():
    """Genera outputs de ejemplo para testing"""
    
    # Historia mejorada de ejemplo
    enhanced_story = """# La Espada Perdida - Versi√≥n Mejorada

## Pr√≥logo: El Eco del Pasado

En las brumas del tiempo, cuando el mundo era joven y la magia flu√≠a como r√≠os de luz entre las monta√±as, una espada fue forjada con el coraz√≥n de una estrella ca√≠da. Su nombre era Luminar, y su destino estaba entrelazado con el equilibrio entre la luz y las sombras.

Mil a√±os han pasado desde que la espada desapareci√≥, oculta en los pliegues de la realidad por aquellos que comprend√≠an el precio del poder absoluto.

Pero las profec√≠as nunca mienten. Y cuando la oscuridad amenaza con devorar el mundo, Luminar despierta... y llama a su elegida.

## Cap√≠tulo 1: El Peso de los Sue√±os

Aria Valorheart despert√≥ con l√°grimas en los ojos, el eco de una voz ancestral a√∫n resonando en su mente. La posada "El Drag√≥n Dormido" permanec√≠a en silencio, salvo por el crepitar de las brasas moribundas en la chimenea principal.

Dieciocho a√±os hab√≠a vivido en este lugar, hu√©rfana desde los cinco, cuando una plaga devast√≥ su aldea natal. Dieciocho a√±os limpiando, sirviendo, sonriendo a extra√±os que nunca recordar√≠an su nombre. Pero los sue√±os... los sue√±os la conoc√≠an √≠ntimamente.

*"Aria... hija de dos mundos... la espada aguarda..."*

Se incorpor√≥ en su estrecho catre, observando por la ventana las monta√±as que se alzaban como titanes p√©treos contra el cielo estrellado. En alg√∫n lugar, entre esos picos cubiertos de misterio, Luminar la esperaba. Lo sab√≠a con la certeza que solo otorgan las verdades que trascienden la raz√≥n.

Sus manos, callosas por el trabajo pero extra√±amente elegantes, se cerraron en pu√±os. ¬øC√≥mo pod√≠a una simple sirvienta ser la elegida de una espada legendaria? ¬øQu√© hab√≠a en ella que no pod√≠a ver?

La respuesta vendr√≠a con el amanecer, cuando el destino tom√≥ la forma de un anciano de ojos como estrellas apagadas.

## Cap√≠tulo 2: El Heraldo del Destino

[Continuaci√≥n mejorada con mayor profundidad emocional, worldbuilding expandido y desarrollo de personajes m√°s rico...]

---

*Esta versi√≥n ha sido mejorada por los agentes especializados, incorporando:*
- *Mayor profundidad emocional en los personajes*
- *Worldbuilding m√°s detallado y consistente*
- *Estructura narrativa optimizada*
- *Voz narrativa m√°s distintiva y po√©tica*
"""
    
    # Biblia de la historia
    story_bible = {
        "world_name": "Valderon",
        "magic_system": {
            "type": "Crystal-based Channeling",
            "description": "La magia fluye a trav√©s de cristales naturales que amplifican la energ√≠a espiritual",
            "limitations": "Los cristales se agotan con el uso excesivo y deben recargarse bajo la luz lunar",
            "schools": ["Elementalismo", "Sanaci√≥n", "Ilusi√≥n", "Transmutaci√≥n"]
        },
        "geography": {
            "regions": [
                {
                    "name": "Las Tierras Centrales",
                    "description": "Llanuras f√©rtiles donde prosperan las ciudades comerciales",
                    "climate": "Templado, con estaciones marcadas"
                },
                {
                    "name": "Los Picos Et√©reos", 
                    "description": "Monta√±as sagradas donde la magia es m√°s fuerte",
                    "climate": "Fr√≠o perpetuo, nevadas constantes"
                },
                {
                    "name": "El Bosque de Susurros",
                    "description": "Bosque ancestral donde habitan esp√≠ritus antiguos",
                    "climate": "H√∫medo, brumoso, temperaturas variables"
                }
            ]
        },
        "timeline": [
            {
                "year": "A√±o 0 - Era Dorada",
                "event": "Forjado de la Espada Luminar"
            },
            {
                "year": "A√±o 500 - La Primera Oscuridad", 
                "event": "Primer alzamiento del Se√±or de las Sombras, derrotado por el h√©roe Valderon"
            },
            {
                "year": "A√±o 1000 - El Gran Ocultamiento",
                "event": "Luminar es ocultada para prevenir su mal uso"
            },
            {
                "year": "A√±o 1500 - Presente",
                "event": "Despertar de Aria y retorno del Se√±or de las Sombras"
            }
        ]
    }
    
    # Gu√≠a de personajes
    character_guide = {
        "main_characters": [
            {
                "name": "Aria Valorheart",
                "age": 18,
                "role": "Protagonista - La Elegida",
                "background": "Hu√©rfana criada en una posada, desconoce su linaje real",
                "personality": "Determinada pero insegura, compasiva, intuitiva",
                "arc": "De sirvienta insegura a hero√≠na confiada que abraza su destino",
                "abilities": "Afinidad natural con cristales m√°gicos, liderazgo innato",
                "relationships": {
                    "Kael": "Compa√±ero de aventuras, eventual inter√©s rom√°ntico",
                    "Theron": "Mentor y gu√≠a espiritual",
                    "Se√±or de las Sombras": "N√©mesis, representa sus miedos internos"
                }
            },
            {
                "name": "Kael Monta√±√©s",
                "age": 22,
                "role": "Deuteragonista - El Guardi√°n",
                "background": "Guerrero de las monta√±as, hermana desaparecida",
                "personality": "Protector, leal, haunted por el pasado",
                "arc": "De vengador solitario a verdadero compa√±ero",
                "abilities": "Maestr√≠a en combate, resistencia sobrenatural",
                "relationships": {
                    "Aria": "Protege y eventualmente ama",
                    "Lysa": "Hermana perdida que debe rescatar"
                }
            }
        ]
    }
    
    # Prompts visuales
    visual_prompts = [
        {
            "scene": "Aria's Awakening",
            "prompt": "A young woman with auburn hair sits up in a narrow bed within a rustic inn, ethereal silver light filtering through a small window, her eyes wide with otherworldly vision, cinematic lighting, fantasy realism, misty atmosphere",
            "style": "Epic fantasy, reminiscent of Lord of the Rings cinematography",
            "mood": "Mystical, contemplative, destiny calling"
        },
        {
            "scene": "The Sword Revelation", 
            "prompt": "Ancient silver sword embedded in crystalline stone within an enchanted forest clearing, beams of moonlight creating lens flares, magical particles floating in the air, photorealistic, dramatic composition",
            "style": "High fantasy, cinematic quality",
            "mood": "Awe-inspiring, magical, pivotal moment"
        },
        {
            "scene": "Character Introduction - Theron",
            "prompt": "Elderly wizard in gray robes with star-filled eyes, sitting in a dim tavern corner, weathered hands wrapped around a simple cup, mysterious aura, character study, dramatic lighting",
            "style": "Character portrait, atmospheric",
            "mood": "Wise, mysterious, harbinger of change"
        }
    ]
    
    # Guardar en session state
    st.session_state.final_outputs = {
        'enhanced_story': enhanced_story,
        'story_bible': story_bible,
        'character_guide': character_guide,
        'visual_prompts': visual_prompts
    }

def render_enhanced_story():
    """Renderiza la historia mejorada"""
    
    st.subheader("üìñ Historia Mejorada")
    
    if not st.session_state.final_outputs['enhanced_story']:
        st.info("La historia mejorada aparecer√° aqu√≠ una vez completado el proceso.")
        return
    
    # Estad√≠sticas de la historia
    content = st.session_state.final_outputs['enhanced_story']
    word_count = len(content.split())
    char_count = len(content)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìù Palabras", word_count)
    with col2:
        st.metric("üî§ Caracteres", char_count)
    with col3:
        if st.session_state.manuscript_content:
            original_words = len(st.session_state.manuscript_content.split())
            improvement = ((word_count - original_words) / original_words) * 100
            st.metric("üìà Mejora", f"+{improvement:.0f}%")
    
    st.markdown("---")
    
    # Opciones de visualizaci√≥n
    col1, col2, col3 = st.columns(3)
    with col1:
        view_mode = st.selectbox("Vista", ["Completa", "Por Cap√≠tulos", "Comparaci√≥n"])
    with col2:
        if st.button("üìã Copiar Texto"):
            st.code(content)
    with col3:
        if st.button("üíæ Descargar"):
            download_text_file(content, "historia_mejorada.md")
    
    # Mostrar contenido
    if view_mode == "Completa":
        st.markdown(content)
    elif view_mode == "Por Cap√≠tulos":
        render_story_by_chapters(content)
    else:
        render_story_comparison()

def render_story_by_chapters(content: str):
    """Renderiza la historia dividida por cap√≠tulos"""
    
    # Dividir por cap√≠tulos (simplificado)
    chapters = content.split("## ")
    
    for i, chapter in enumerate(chapters):
        if chapter.strip():
            chapter_title = chapter.split('\n')[0]
            chapter_content = '\n'.join(chapter.split('\n')[1:])
            
            with st.expander(f"Cap√≠tulo {i}: {chapter_title}", expanded=(i == 0)):
                st.markdown(chapter_content)

def render_story_comparison():
    """Renderiza comparaci√≥n entre historia original y mejorada"""
    
    if not st.session_state.manuscript_content:
        st.warning("No hay historia original para comparar")
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìù Historia Original")
        st.text_area("Original", st.session_state.manuscript_content, height=400, disabled=True)
    
    with col2:
        st.subheader("‚ú® Historia Mejorada")
        st.text_area("Mejorada", st.session_state.final_outputs['enhanced_story'], height=400, disabled=True)

def render_story_bible():
    """Renderiza la biblia de la historia"""
    
    st.subheader("üìö Biblia de la Historia")
    
    if not st.session_state.final_outputs['story_bible']:
        st.info("La biblia de la historia aparecer√° aqu√≠ una vez completado el proceso.")
        return
    
    bible = st.session_state.final_outputs['story_bible']
    
    # Tabs para organizar la biblia
    tab1, tab2, tab3, tab4 = st.tabs(["üåç Mundo", "‚ú® Magia", "üìÖ Timeline", "üó∫Ô∏è Geograf√≠a"])
    
    with tab